#!/bin/bash

# === Configuration ===
export WINEPREFIX="$HOME/.sbrewprefix"
export WINEARCH=wow64
export WINEDEBUG="-all"
export SBREW_PATH="$HOME/.local/share/sbrew"
export STORYBREW_EXE="$SBREW_PATH/StorybrewEditor.exe"
export STORYBREW_DRIVE_PATH="D:\\StorybrewEditor.exe"
export WINEBREW_SCRIPT_PATH="$HOME/.local/bin/winebrew"
export VERSION_DIR="$HOME/.local/share/winebrew"

# === Wine-osu configuration ===
export WINE_OSU_DIR="$HOME/.local/share/winebrew/wine-osu"
export WINE_OSU_VERSION="10.6-1"
export WINE_OSU_VERSION_FILE="$VERSION_DIR/wine-osu-version"
export WINE_OSU_BIN="$WINE_OSU_DIR/bin/wine"

# === PATH configuration ===
export PATH="$WINE_OSU_DIR/bin:$PATH"

# === Colored logging helpers ===
info()  { echo -e "\e[32m[winebrew] INFO:\e[0m $*"; }
warn()  { echo -e "\e[33m[winebrew] WARNING:\e[0m $*"; }
error() { echo -e "\e[31m[winebrew] ERROR:\e[0m $*"; }

# === Download helper ===
download_file() {
    local url="$1"
    local output_path="$2"

    info "Downloading: $url"
    if command -v wget &>/dev/null; then
        wget -q --show-progress -O "$output_path" "$url"
        return $?
    elif command -v curl &>/dev/null; then
        curl -L --progress-bar -o "$output_path" "$url"
        return $?
    else
        error "Neither wget nor curl is installed. Cannot download file."
        return 1
    fi
}

# === Distro package installer ===
install_package() {
    local pkg="$1"
    if command -v pacman &>/dev/null; then
        info "Detected Arch Linux. Installing $pkg via pacman..."
        sudo pacman -Sy --noconfirm "$pkg"
    elif command -v apt &>/dev/null; then
        info "Detected Debian/Ubuntu. Installing $pkg via apt..."
        sudo apt update && sudo apt install -y "$pkg"
    elif command -v dnf &>/dev/null; then
        info "Detected Fedora/RHEL. Installing $pkg via dnf..."
        sudo dnf install -y "$pkg"
    elif command -v zypper &>/dev/null; then
        info "Detected openSUSE. Installing $pkg via zypper..."
        sudo zypper install -y "$pkg"
    else
        error "Unsupported distro. Please install '$pkg' manually."
        return 1
    fi
}

# === Drive D: mapping ===
ensure_drive_mapping() {
    if [ ! -L "$WINEPREFIX/dosdevices/d:" ]; then
        ln -sf "$SBREW_PATH" "$WINEPREFIX/dosdevices/d:"
    fi
}

# === VSCode passthrough ===
setup_vscode_passthrough() {
    info "Setting up Wine passthrough for VSCode..."
    local passthru_dir="$HOME/.local/share/sbrew/vscode-fake"
    local bin_dir="$passthru_dir/bin"
    mkdir -p "$bin_dir"

    cat <<'EOF' > "$bin_dir/code"
#!/bin/bash
ARGS=()

for arg in "$@"; do
    if [[ "$arg" == -* ]]; then
    ARGS+=( "$arg" )
    else
    ARGS+=( "$(winepath -u "$arg")" )
    fi
done

code "${ARGS[@]}"
EOF

    chmod +x "$bin_dir/code"
    local unix_path="Z:\\${bin_dir//\//\\}"
    wine reg add "HKCU\\Environment" /v PATH /t REG_EXPAND_SZ /d "%PATH%;$unix_path" /f
    info "VSCode passthrough setup complete."
}

# === Storybrew downloader ===
install_storybrew() {
    if [[ -f "$STORYBREW_EXE" ]]; then
        info "Storybrew is already installed at $STORYBREW_EXE"
        return
    fi

    info "Checking for latest Storybrew release..."
    release_data=$(curl -s https://api.github.com/repos/damnae/storybrew/releases/latest)
    zip_url=$(echo "$release_data" | grep browser_download_url | grep -E '\.zip"' | cut -d '"' -f 4)

    if [[ -z "$zip_url" ]]; then
        error "Could not find .zip release for Storybrew."
        exit 1
    fi

    TMP=$(mktemp -d)
    local zip_file="$TMP/storybrew.zip"

    download_file "$zip_url" "$zip_file" || {
        error "Failed to download Storybrew. Please check your internet connection."
        rm -rf "$TMP"
        exit 1
    }

    info "Extracting..."
    mkdir -p "$SBREW_PATH"
    unzip -q "$zip_file" -d "$SBREW_PATH"
    rm -rf "$TMP"

    [[ -f "$STORYBREW_EXE" ]] && info "Storybrew installed successfully." || {
        error "Storybrew extraction failed."
        exit 1
    }
}

# === .NET + SDK setup ===
fixprefix() {
    info "Resetting Wine prefix..."
    rm -rf "$WINEPREFIX"
    mkdir -p "$WINEPREFIX"

    info "Creating new prefix..."
    WINEPREFIX="$WINEPREFIX" wineboot

    info "Setting Windows version to 10..."
    wine reg add "HKCU\\Software\\Wine\\Wine\\Config" /v Version /t REG_SZ /d win10 /f

    TMP=$(mktemp -d)

    info "Installing .NET Desktop Runtime 8.0.8 (x86)..."
    local runtime_url="https://builds.dotnet.microsoft.com/dotnet/WindowsDesktop/8.0.8/windowsdesktop-runtime-8.0.8-win-x86.exe"
    local runtime_file="$TMP/dotnet-runtime.exe"
    download_file "$runtime_url" "$runtime_file" || {
        error "Failed to download .NET Runtime. Please check your internet connection."
        exit 1
    }
    WINEPREFIX="$WINEPREFIX" wine "$runtime_file" /quiet /norestart

    info "Installing .NET SDK 8.0.408 (x86)..."
    local sdk_url="https://builds.dotnet.microsoft.com/dotnet/Sdk/8.0.408/dotnet-sdk-8.0.408-win-x86.exe"
    local sdk_file="$TMP/dotnet-sdk.exe"
    download_file "$sdk_url" "$sdk_file" || {
        error "Failed to download .NET SDK. Please check your internet connection."
        exit 1
    }
    WINEPREFIX="$WINEPREFIX" wine "$sdk_file" /quiet /norestart

    rm -rf "$TMP"

    ensure_drive_mapping
    setup_vscode_passthrough
    setup_folder_hijack
    info "Wine prefix with .NET 8.0.8 + SDK ready."
}

# === Launch Storybrew ===
launch_storybrew() {
    if [[ ! -f "$STORYBREW_EXE" ]]; then
        info "Storybrew not found. Installing..."
        fixprefix
        install_storybrew
        setup_vscode_passthrough
        setup_folder_hijack
    fi

    info "Launching Storybrew..."
    ensure_drive_mapping
    cd "$SBREW_PATH" || exit 1
    WINEPREFIX="$WINEPREFIX" wine cmd /c \
        "set DOTNET_ROOT=C:\\Program Files\\dotnet && D:\\StorybrewEditor.exe"
}

# === Debug info ===
debuginfo() {
    WINEPREFIX="$WINEPREFIX" wine "C:\\Program Files\\dotnet\\dotnet.exe" --list-runtimes
}

# === Desktop entry with icon ===
install_desktop_entry() {
    local desktop_path="$HOME/.local/share/applications/winebrew-storybrew.desktop"
    local icon_dir="$HOME/.local/share/icons/storybrew"
    local ico_url="https://raw.githubusercontent.com/Damnae/storybrew/master/editor/icon.ico"
    local ico_file="$icon_dir/icon.ico"

    if [[ -f "$desktop_path" ]]; then
        info "Desktop entry already exists at $desktop_path"
        return
    fi

    info "Installing Storybrew icon..."
    mkdir -p "$icon_dir"
    download_file "$ico_url" "$ico_file"

    if [[ ! -f "$ico_file" ]]; then
        error "Failed to download icon file... Using default icon."

    else
        info "Icon downloaded successfully."
        local icon_path="$ico_file"

        if ! command -v icotool &> /dev/null; then
            warn "'icotool' not found. Trying to install 'icoutils'..."
            install_package icoutils || return
        fi

        if command -v icotool &> /dev/null; then
            icotool -x -o "$icon_dir" "$ico_file"
            icon_path=$(find "$icon_dir" -type f -name '*256x256x32.png' | head -n1)
            [[ -z "$icon_path" ]] && icon_path=$(find "$icon_dir" -type f -name '*.png' | head -n1)
            [[ -z "$icon_path" ]] && icon_path="$ico_file"
        fi
    fi

    info "Writing .desktop file..."
    cat <<EOF > "$desktop_path"
[Desktop Entry]
Name=Storybrew Editor
Comment=Visual storyboard editor for osu!
Exec=$HOME/.local/bin/winebrew
Icon=$icon_path
Terminal=false
Type=Application
Categories=Game;Utility;
StartupWMClass=storybrew
EOF

    chmod +x "$desktop_path"
    info "Desktop entry installed at $desktop_path"
}

# === Check for updates ===
check_for_updates() {
    local local_version_file="$VERSION_DIR/version.json"
    local remote_version_url="https://raw.githubusercontent.com/maotovisk/winebrew/main/version.json"
    local remote_script_url="https://raw.githubusercontent.com/maotovisk/winebrew/main/winebrew"

    if [[ ! -f "$local_version_file" ]]; then
        warn "Local version file not found... Creating it."
        if [[ ! -d "$VERSION_DIR" ]]; then
            mkdir -p "$VERSION_DIR"
        fi
        echo '{"version": "0.0.0"}' > "$local_version_file"
    fi

    if [[ ! -s "$local_version_file" ]]; then
        warn "Local version file is empty... Creating it."
        echo '{"version": "0.0.0"}' > "$local_version_file"
    fi

    if ! jq empty "$local_version_file" 2>/dev/null; then
        warn "Local version file has invalid JSON format. Creating a new one."
        echo '{"version": "0.0.0"}' > "$local_version_file"
    fi

    local local_version=$(jq -r .version "$local_version_file")
    local remote_version=$(curl -s "$remote_version_url" | jq -r .version)

    if [[ "$remote_version" == "null" ]]; then
        error "Failed to fetch remote version."
        exit 1
    fi

    if [[ "$remote_version" != "$local_version" ]]; then
        info "Update available! Installed version: $local_version, New version: $remote_version"
        echo -n "Do you want to update now? [y/N] "
        read -r answer
        if [[ "$answer" =~ ^[Yy]$ ]]; then
            local tmp_dir=$(mktemp -d)
            local tmp_script="$tmp_dir/winebrew"
            download_file "$remote_script_url" "$tmp_script"
            if [[ $? -ne 0 ]]; then
                error "Failed to download the new version."
                rm -rf "$tmp_dir"
                exit 1
            fi

            info "Removing old version..."
            rm -f "$WINEBREW_SCRIPT_PATH"
            info "Installing new version..."
            mv "$tmp_script" "$WINEBREW_SCRIPT_PATH"
            chmod +x "$WINEBREW_SCRIPT_PATH"

            if [[ -f "$WINEBREW_SCRIPT_PATH" ]]; then
                info "New version installed successfully."
            else
                error "Failed to install new version."
                exit 1
            fi
            rm -rf "$tmp_dir"

            info "Updated winebrew to version $remote_version"
            echo "{\"version\": \"$remote_version\"}" > "$local_version_file"
        else
            info "Update cancelled."
        fi
    else
        info "You are running the latest version: $local_version"
    fi
    update_wine_osu
}

# === Wine-osu installation and update ===
update_wine_osu() {
    info "Checking for wine-osu updates..."
    local installed_version="0"

    # Create wine-osu directory if it doesn't exist
    mkdir -p "$WINE_OSU_DIR"
    mkdir -p "$VERSION_DIR"

    # Get installed version if exists
    if [ -f "$WINE_OSU_VERSION_FILE" ]; then
        installed_version=$(<"$WINE_OSU_VERSION_FILE")
        # Validate version format
        if [[ ! "$installed_version" =~ ^[0-9]+\.[0-9]+-[0-9]+$ && "$installed_version" != "0" ]]; then
            warn "Invalid version format in wine-osu version file. Resetting to 0."
            installed_version="0"
            echo "0" > "$WINE_OSU_VERSION_FILE"
        fi
    else
        # Create initial version file if it doesn't exist
        echo "0" > "$WINE_OSU_VERSION_FILE"
    fi

    info "wine-osu: installed version: $installed_version, latest version: $WINE_OSU_VERSION"

    if [ "$installed_version" != "$WINE_OSU_VERSION" ]; then
        info "Wine-osu update available!"

        # Wine-osu download URL
        local wine_url="https://github.com/NelloKudo/WineBuilder/releases/download/wine-osu-staging-${WINE_OSU_VERSION}/wine-osu-winello-fonts-wow64-${WINE_OSU_VERSION}-x86_64.tar.xz"
        local tmp_file="/tmp/wine-osu-${WINE_OSU_VERSION}-$(date +%s).tar.xz"

        # Download Wine-osu
        info "Downloading Wine-osu version $WINE_OSU_VERSION..."
        if ! download_file "$wine_url" "$tmp_file"; then
            error "Failed to download Wine-osu. Please check your internet connection."
            return 1
        fi

        # Remove old Wine-osu installation
        info "Removing old Wine-osu installation..."
        rm -rf "$WINE_OSU_DIR"
        mkdir -p "$WINE_OSU_DIR"

        # Extract Wine-osu
        info "Installing Wine-osu version $WINE_OSU_VERSION..."
        tar -xf "$tmp_file" -C "$WINE_OSU_DIR" --strip-components=1
        rm -f "$tmp_file"

        # Check if installation was successful
        if [ -x "$WINE_OSU_BIN" ]; then
            # Update version file only after successful installation
            echo "$WINE_OSU_VERSION" > "$WINE_OSU_VERSION_FILE"
            chmod +x "$WINE_OSU_BIN"
            info "Wine-osu version $WINE_OSU_VERSION installed successfully!"
        else
            error "Wine-osu installation failed. The binary was not found at $WINE_OSU_BIN"
            # Restore old version in version file
            echo "$installed_version" > "$WINE_OSU_VERSION_FILE"
            return 1
        fi
    else
        info "Wine-osu is already up-to-date (version $WINE_OSU_VERSION)"
    fi

    return 0
}

# === Setup run_as_linux ===
install_run_as_linux() {
    local script_path="$HOME/.local/bin/run_as_linux"

    if [[ -f "$script_path" ]]; then
        info "run_as_linux already exists at $script_path"
        return
    fi

    info "Installing run_as_linux helper script..."

    mkdir -p "$HOME/.local/bin"
    cat <<'EOF' > "$script_path"
#!/bin/bash

if [ -z "$1" ]; then
    echo "Usage: run_as_linux <command> [wine_path]"
    exit 1
fi

COMMAND="$1"
WINE_PATH="$2"

if [[ -z "$WINE_PATH" ]]; then
    echo "[run_as_linux] Missing path argument."
    exit 1
fi

UNIX_PATH=$(wine winepath -u "$WINE_PATH" 2>/dev/null)

if [[ -z "$UNIX_PATH" ]]; then
    echo "[run_as_linux] Failed to convert path."
    exit 1
fi

"$COMMAND" "$UNIX_PATH" &
EOF

    chmod +x "$script_path"
    info "run_as_linux installed at $script_path"
}

# === Hijack folder for Storybrew ===
setup_folder_hijack() {
    install_run_as_linux

    info "Applying registry override to use xdg-open for folders..."

    local script_path="/home/$(whoami)/.local/bin/run_as_linux"

    cat > /tmp/folder_hijack.reg <<EOF
REGEDIT4

[HKEY_CLASSES_ROOT\\Folder\\shell\\open\\command]
@="/bin/sh $script_path xdg-open \\"%1\\""

[-HKEY_CLASSES_ROOT\\Folder\\shell\\open\\ddeexec]
EOF

    WINEPREFIX="${WINEPREFIX:-$HOME/.sbrewprefix}" wine regedit /tmp/folder_hijack.reg
    rm /tmp/folder_hijack.reg

    info "Wine will now use xdg-open for folders."
}

# === Display help ===
show_help() {
    cat << EOF
winebrew - Storybrew and wine-osu management tool

Usage: winebrew [OPTION]

Options:
  --help                  Display this help message
  --fix-prefix            Recreate Wine prefix and reinstall .NET
  --install-storybrew     (Re)download Storybrew to the correct folder
  --setup-vscode          Recreate the VSCode passthrough script
  --install-desktop       Create a desktop entry for launching
  --update                Check for updates to the script and wine-osu
  --update-wine-osu       Check for and install updates to wine-osu only
  --debug                 Print installed .NET runtimes in the prefix
  --setup-folders         Configure folder opening in Wine

When run without options, winebrew will launch Storybrew.
EOF
}

# === Main ===
case "$1" in
    --help) show_help ;;
    --fix-prefix) fixprefix ;;
    --install-storybrew) install_storybrew ;;
    --setup-vscode) setup_vscode_passthrough ;;
    --install-desktop) install_desktop_entry ;;
    --update) check_for_updates ;;
    --update-wine-osu) update_wine_osu ;;
    --debug) debuginfo ;;
    --setup-folders) setup_folder_hijack ;;
    "") launch_storybrew ;;
    *)
        error "Unknown argument: $1"
        echo "Use 'winebrew --help' for a list of available options"
        exit 1
        ;;
esac
